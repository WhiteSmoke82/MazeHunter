/* autogenerated by Processing revision 1293 on 2024-04-05 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class mazehunter extends PApplet {

int backgroundColor = 0xFFEEEEEE;

int mazeBackgroundColor = 0xFFEAEAEA;
int edgeColor = 0xFF000000;
int wallColor = 0xFF666666;
int gridColor = 0xFFFF0000;

int endBackground = 0xFF00FF00;
int startBackground = 0xFF0000FF;

boolean middleEnd = true;

float cellAmount = 16;
float borderPadding = 50;
float cellSize;
float poleSize = 5;
float wallSize = 3;

PGraphics maze;
PImage logo;

public void setup(){
    /* size commented out by preprocessor */;
    frameRate(500);
    cellSize = (height - 2*borderPadding)/cellAmount;
    logo = loadImage("resources/logo.png");
    logo.resize(300, 0);
    textSize(20);

    setupMazeList();
    maze = createGraphics(ceil(height-2*borderPadding)+1, ceil(height-2*borderPadding)+1);
    drawMaze();
}

public void draw(){
    background(backgroundColor);

    image(logo, borderPadding - 30 , borderPadding);
    fill(0);
    text("Framerate: " + round(frameRate), borderPadding + 20, 330);

    setupMazeList();
    drawMaze();

    drawField();
}

public void drawMaze(){
    maze.beginDraw();
    maze.background(mazeBackgroundColor);
    for(int i = 0; i < mazeList.size(); i++){
        for(int j = 0; j < mazeList.size(); j++){
            mazeList.get(i).get(j).draw();
        }
    }
    maze.stroke(gridColor);
    maze.strokeWeight(poleSize);
    for(int i = 1; i < cellAmount; i++){
        for(int j = 1; j < cellAmount; j++){
            maze.point(i*cellSize, j*cellSize);
        }
    }
    maze.stroke(edgeColor);
    maze.noFill();
    maze.rect(0, 0, cellAmount*cellSize, cellAmount*cellSize);

    maze.endDraw();
}

public void drawField(){
    image(maze, width - cellSize*cellAmount - borderPadding, borderPadding);
}
class Cell{
    boolean n = false, e = false, s = false, w = false;
    int r, c;
    char type = 'n';

    Cell(int r, int c){
        this.r = r;
        this.c = c;
    }

    public void draw(){
        maze.noStroke();
        int toFill = (type == 'n' ? mazeBackgroundColor : (type == 'e' ? endBackground : startBackground));
        maze.fill(toFill);
        maze.rect(c * cellSize, r * cellSize, cellSize, cellSize);
        maze.noFill();
        maze.strokeWeight(wallSize);
        maze.stroke(wallColor);
        if(n) maze.line(c * cellSize, r * cellSize, (c + 1) * cellSize, r * cellSize);
        if(e) maze.line((c + 1) * cellSize, r * cellSize, (c + 1) * cellSize, (r + 1) * cellSize);
        if(s) maze.line((c + 1) * cellSize, (r + 1) * cellSize, c * cellSize, (r + 1) * cellSize);
        if(w) maze.line(c * cellSize, (r + 1) * cellSize, c * cellSize, r * cellSize);
    }
}

ArrayList<ArrayList<Cell>> mazeList = new ArrayList<ArrayList<Cell>>();

public void setupMazeList(){
    mazeList.clear();
    for(int i = 0; i < cellAmount; i++){
        ArrayList<Cell> temp = new ArrayList<Cell>();
        for(int j = 0; j < cellAmount; j++){
            temp.add(new Cell(j, i));
        }
        mazeList.add(temp);
    }

    createEnd();
    createStart();
}

public void createEnd(){
    int endR, endC;
    if(middleEnd){
        endR = PApplet.parseInt(cellAmount/2);
        endC = PApplet.parseInt(cellAmount/2);
    }else{
        endR = PApplet.parseInt(random(1, cellAmount));
        endC = PApplet.parseInt(random(1, cellAmount));
    }
    mazeList.get(endR).get(endC).type = 'e';
    mazeList.get(endR-1).get(endC-1).type = 'e';
    mazeList.get(endR-1).get(endC).type = 'e';
    mazeList.get(endR).get(endC-1).type = 'e';
}

public void createStart(){
    int startR = PApplet.parseInt(random(0, 2))*PApplet.parseInt(cellAmount-1);
    int startC = PApplet.parseInt(random(0, 2))*PApplet.parseInt(cellAmount-1);
    mazeList.get(startR).get(startC).type = 's';
}


  public void settings() { size(1100, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "mazehunter" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
